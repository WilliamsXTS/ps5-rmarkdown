sec_man_lifetime <- year_man_lifetime*secinyear
sec_man_lifetime
make_introduction <- function(name,age){
intro <- paste("Hello, my name is", name, ", and I'm", age, "years old")
return(intro)
}
my_name <- "Tianshi"
my_age <- 20
my_intro <- make_introduction(my_name, my_age)
my_intro
casual_intro <- str_replace(my_intro, fixed("Hello, my name is", ignore_case=TRUE),"Hey, I'm")
casual_intro
loud_intro <- toupper(my_intro)
loud_intro
occurances <- str_count(my_intro, "e")
occurances
double <- function(x) {
return(x*2)
}
seconds_in_two_years <- double(secinyear)
seconds_in_two_years
cube <- function(x){
return(x^3)
}
pass3_cube <- cube(3)
pass3_cube
for(i in 1:10){
i2 <- i^3
cat(i,"^3=",i2,"\n", sep="")
}
movies <- c("Harry Potter","The Shawshank Redemption","The Godfather","Pulp Fiction","Forrest Gump","Inception")
movies
top_three <- movies[1:3]
top_three
excited <- paste(movies, "is a great movie")
excited
without_four <- c(movies[1:3],movies[5:6])
without_four
numbers <- 70:79
numbers
len <- length(numbers)
len
numbers_mean <- mean(numbers)
numbers_mean
lower_numbers <- 60:69
lower_numbers
all_numbers <- c(lower_numbers,numbers)
all_numbers
all_numbers>70
all_numbers[all_numbers<70]
all_numbers[all_numbers<70]^2
modulo <- all_numbers %% 2 == 1
all_numbers[modulo]
remove_digits <- function(x){
str_replace_all(x, "[:digit:]", "")
}
remove_digits <- str_replace_all(c("INFO 201", "CSE 142", "mps-803c","K2-team '21"), "[:digit:]", "")
remove_digits
even_numbers <- function(x){
x <- all_numbers
for (i in 1:length(x)){
if(x[i] %% 2 == 0)
print(x)
}
}
even_numbers(x)
even_numbers <- function(x){
x <- all_numbers
subset(x, x %% 2 == 0)
}
even_numbers(x)
if(remove_digits(any("[:digit:]"))){
print("Oh no!")
}
if (str_detect(c(remove_digits), [0-9])) {
if str_detect(c("Hello 241", "Whawt 602"), ".*[0-9].*") {
if (str_detect(c("Hello 241", "Whawt 602"), ".*[0-9].*")){
print("Oh no!")
} else {
print("Yay!")
}
if (str_detect(c(remove_digits), ".*[0-9].*")){
print("Oh no!")
} else {
print("Yay!")
}
if (str_detect(c("INFO 201", "CSE 142", "mps-803c","K2-team '21"), ".*[0-9].*")){
print("Oh no!")
} else {
print("Yay!")
}
remove_digits <- function(vec) {
vec <- gsub("[0-9]", "", vec)
return(vec)
}
courses <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
courses_no_digits <- remove_digits(courses)
courses_no_digits
if (any(grepl("[0-9]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
if (any(grepl("[0-9]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
even_numbers <- function(x){
x <- all_numbers
subset(x, x %% 2 == 0)
}
even_numbers(x)
secinyear <- 365*24*60*60
secinyear
I_am_old <- age_in_sec > 650000000
I_am_old <- FALSE
print(paste("I am more than 650M seconds old: ",I_am_old))
my_age <- 20
cat("I am", my_age,"years old","\n" )
secinyear <- 365*24*60*60
secinyear
age_in_sec <- my_age*secinyear
age_in_sec
I_am_old <- age_in_sec > 650000000
I_am_old <- FALSE
print(paste("I am more than 650M seconds old: ",I_am_old))
year_man_lifetime <- 78
sec_man_lifetime <- year_man_lifetime*secinyear
sec_man_lifetime
make_introduction <- function(name,age){
intro <- paste("Hello, my name is", name, ", and I'm", age, "years old")
return(intro)
}
my_name <- "Tianshi"
my_age <- 20
my_intro <- make_introduction(my_name, my_age)
my_intro
casual_intro <- str_replace(my_intro, fixed("Hello, my name is", ignore_case=TRUE),"Hey, I'm")
casual_intro
loud_intro <- toupper(my_intro)
loud_intro
occurances <- str_count(my_intro, "e")
occurances
double <- function(x) {
return(x*2)
}
seconds_in_two_years <- double(secinyear)
seconds_in_two_years
cube <- function(x){
return(x^3)
}
pass3_cube <- cube(3)
pass3_cube
for(i in 1:10){
i2 <- i^3
cat(i,"^3=",i2,"\n", sep="")
}
movies <- c("Harry Potter","The Shawshank Redemption","The Godfather","Pulp Fiction","Forrest Gump","Inception")
movies
top_three <- movies[1:3]
top_three
excited <- paste(movies, "is a great movie")
excited
without_four <- c(movies[1:3],movies[5:6])
without_four
numbers <- 70:79
numbers
len <- length(numbers)
len
numbers_mean <- mean(numbers)
numbers_mean
lower_numbers <- 60:69
lower_numbers
all_numbers <- c(lower_numbers,numbers)
all_numbers
all_numbers>70
all_numbers[all_numbers<70]
all_numbers[all_numbers<70]^2
modulo <- all_numbers %% 2 == 1
all_numbers[modulo]
even_numbers <- function(x){
x <- all_numbers
subset(x, x %% 2 == 0)
}
even_numbers(x)
remove_digits <- function(vec) {
vec <- gsub("[0-9]", "", vec)
return(vec)
}
courses <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
courses_no_digits <- remove_digits(courses)
courses_no_digits
if (any(grepl("[0-9]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
tinytex::install_tinytex()
Y
tinytex::install_tinytex()
Y
my_age <- 20
cat("I am", my_age,"years old","\n" )
secinyear <- 365*24*60*60
secinyear
age_in_sec <- my_age*secinyear
age_in_sec
I_am_old <- age_in_sec > 650000000
I_am_old <- FALSE
print(paste("I am more than 650M seconds old: ",I_am_old))
year_man_lifetime <- 78
sec_man_lifetime <- year_man_lifetime*secinyear
sec_man_lifetime
make_introduction <- function(name,age){
intro <- paste("Hello, my name is", name, ", and I'm", age, "years old")
return(intro)
}
my_name <- "Tianshi"
my_age <- 20
my_intro <- make_introduction(my_name, my_age)
my_intro
library(stringr)
casual_intro <- str_replace(my_intro, fixed("Hello, my name is", ignore_case=TRUE),"Hey, I'm")
casual_intro
loud_intro <- toupper(my_intro)
loud_intro
occurances <- str_count(my_intro, "e")
occurances
double <- function(x) {
return(x*2)
}
seconds_in_two_years <- double(secinyear)
seconds_in_two_years
cube <- function(x){
return(x^3)
}
pass3_cube <- cube(3)
pass3_cube
for(i in 1:10){
i2 <- i^3
cat(i,"^3=",i2,"\n", sep="")
}
movies <- c("Harry Potter","The Shawshank Redemption","The Godfather","Pulp Fiction","Forrest Gump","Inception")
movies
top_three <- movies[1:3]
top_three
excited <- paste(movies, "is a great movie")
excited
without_four <- c(movies[1:3],movies[5:6])
without_four
numbers <- 70:79
numbers
len <- length(numbers)
len
numbers_mean <- mean(numbers)
numbers_mean
lower_numbers <- 60:69
lower_numbers
all_numbers <- c(lower_numbers,numbers)
all_numbers
all_numbers>70
all_numbers[all_numbers<70]
all_numbers[all_numbers<70]^2
modulo <- all_numbers %% 2 == 1
all_numbers[modulo]
even_numbers <- function(x){
x <- all_numbers
subset(x, x %% 2 == 0)
}
even_numbers(x)
remove_digits <- function(vec) {
vec <- gsub("[0-9]", "", vec)
return(vec)
}
courses <- c("INFO 201", "CSE 142", "mps-803c", "K2-team '21")
courses_no_digits <- remove_digits(courses)
courses_no_digits
if (any(grepl("[0-9]", courses))) {
print("Oh no!")
} else {
print("Yay!")
}
v <- c(1,2,3,4,5)
v[3] <- -3
v
v[v<3] <- 0
v
x <- rnorm(10)
x
x[x<0] <- 0
x
x <- -5:5
x
x[x<0] <- -x[x<0]
x
x <- 5:(-5)
iNeg <- x < 0
x[iNeg] <- -x[iNeg]
x
n <- 1:21
iodd <- n%%2 == 1
iodd
n[iodd] <- 1
n
l <- list(123,"c", c(TRUE,FALSE))
l
emperor <- list(name="Qin Shi HUang", capital="Xianyang", warrior=TRUE)
emperor
length(emperor)
emperor[[1]]
emperor[["capital"]]
emperor$capital
var <- "warrior"
emperor[[var]]
emperor$height <- "5'7\"
emperor
emperor$height <- "5'7\""
emperor$height <- "4'11\""
emperor
emperor[["cell"]] <- 206123456
emperor
names(emperor)
for(i in emperor){
print(name)
}
for(i in emperor){
print(1)
}
for(i in emperor){
print(i)
}
for(i in emperor){
print(i <- name)
}
for(i in emperor){
print(i$name)
}
for(i in emperor){
print(i[[name]])
}
for(i in emperor){
print(i[name])
}
for(i in emperor){
print(emperor[name])
}
for(i in emperor){
print(emperor[[name]])
}
install.packages("stringr")
install.packages("stringr",repos = "http://cran.us.r-project.org")
for(element in names(emperor)) {
cat(element, ":", max(emperor[[element]]), "\n")
}
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
height <- c(58, 59, 60, 61, 62)
weight <- c(120, 122, 124, 126, 128)
patients <- data.frame(name, height, weight)
patients
name
ls()
patients
nrow(patients)
ncol(patients)
dim(patients)
names(patients)
head(patients, 2)
tail(patients,2)
patients(name)
patients$name
var <- "height"
patients[[var]]
patients[[c("name", "height")]]
patients[c("name", "height")]
i <- patients$height >60
patients[i]
i <- patients$height >60
patients[i,]
patients[i,c("name","height")]
patients$test <- c("P", "N", "P", "P", "N")
patients
i <- patients$test["P"]
patients[i,]
patients$test("P")
i <- patients$test == "P"
patients
i <- patients$test == "P"
i
patients[patients$test == "P",]
patients[["tall"]] <- patients$height > 60
patients
mean(patients$height)
i <- patients$test == "P"
patients$weight[1]
i <- patients$test == "P"
patients$weight[i]
i <- patients$test == "P"
weights <- patients$weight
sickWeight <- weights[i]
mean(sickWeight)
patients$weight[i]
mean(patients$weight[patients$test == "P"])
getwd()
name <- c("John", "Howard", "Eugene", "Kevin", "Allan")
name
seahawk <- c(10, 20, 17, 13, 19)
opponent <- c(10, 30, 5, 7, 13)
football <- data.frame(seahawk, opponent)
football
football$diff <- seahawk - opponent
football
football$won <- football$diff > 0
football
opp_name <- c("Denvor Broncos", "a", "b", "c", "d")
football$opp_name <- opp_name
football
mean(football$seahawk)
sum(football$won)
max(football$diff)
?unique
max(abs(football$diff))
length(unique(football$opp_name))
names(football)
for(each in names(football)){
cat(each, "\n")
}
for(each in names(football)){
cat(each, "\n")
if(is.numeric(football[[each]])){
cat("the variable is numberic:", football[["each"]], "\n")
}
}
for(each in names(football)){
cat(each, "\n")
if(is.numeric(football[[each]])){
cat(is.numeric(football[[each]]),"the variable is numberic:", football[["each"]], "\n")
}
}
for(each in names(football)){
cat(each, "\n")
if(is.numeric(football[[each]])){
cat(mean(football[["each"]]), "\n")
}
}
for(each in names(football)){
cat(each, "\n")
if(is.numeric(football[[each]])){
cat(mean(football[[each]]), "\n")
}
}
employees <- for(i in 1:100){
cat(paste("Employee", i))
}
employees <- for(i in 1:100){
cat(paste("Employee", i, "\n"))
}
random_salaries <- runif(100, 50, 200)
random_salaries
salaries_2021 <- runif(100, 50, 200)
salaries_2021
salaries_2022 <- runif(100, 100, 300)
salaries_2022
salaries <- data.frame(salaries_2021, salaries_2022)
salaries
salaries$raise <- salaries_2022 - salaries_2021
salaries
salaries[57, "salaries_2022"]
round(salaries[57, "salaries_2022"], 2)
sum(salaries$raise > 0)
round(max(salaries$raise), 2)
salaries$employee <- employees
salaries
salaries$employees <- employees
salaries$emloyee[salaries$raise -- highest_raise]
mean(salaries$raise)
salaries$raise[salaries$raise <0]
round(salaries$raise[salaries$raise <0], 2)
max(salaries$raise)
highest_raise <- max(salaries$raise)
highest_raise <- max(salaries$raise)
highest_raise
salaries$emloyee[salaries$raise == highest_raise]
salaries$employees <- employees
salaries
employee <- paste("Employee", 1:100)
employee
salaries$employee <- employee
salaries
salaries$emloyee[salaries$raise == highest_raise]
salaries$emloyee[salaries$raise == highest_raise]
salaries
salaries$employee <- employee
salaries
salaries$emloyee[salaries$raise == highest_raise]
?png
library(tidyverse)
#1 Load and check data
1. Load tidyverse library. Set the chunk option message=FALSE to avoid the loading messages to
set("..")
#1 Load and check data
1. Load tidyverse library. Set the chunk option message=FALSE to avoid the loading messages to
setwd("..")
getwd()
setwd("Desktop/INFO201/Lab4-markdown/")
setwd("Desktop/INFO201/Lab4-rmarkdown/")
ih <- read_delim("income-height.csv.bz2")
This dataset contains `r nrow(ih)` and `r ncol(ih)`
str_flatten_comma(names(ih), last = ", and")
str_flatten_comma(names(ih), last = ", and ")
getwd()
setwd("C:/Users/Administrator/Desktop/INFO201/ps5-rmarkdown")
